--[[

	DavitrollzMenu Interface Suite
	by Davi Trollz

]]

if debugX then
	warn('Initialising DavitrollzMenu')
end

local function getService(name)
	local service = game:GetService(name)
	return if cloneref then cloneref(service) else service
end

-- Loads and executes a function hosted on a remote URL. Cancels the request if the requested URL takes too long to respond.
-- Errors with the function are caught and logged to the output
local function loadWithTimeout(url: string, timeout: number?): ...any
	assert(type(url) == "string", "Expected string, got " .. type(url))
	timeout = timeout or 5
	local requestCompleted = false
	local success, result = false, nil

	local requestThread = task.spawn(function()
		local fetchSuccess, fetchResult = pcall(game.HttpGet, game, url)
		if not fetchSuccess or #fetchResult == 0 then
			if #fetchResult == 0 then
				fetchResult = "Empty response"
			end
			success, result = false, fetchResult
			requestCompleted = true
			return
		end
		local content = fetchResult
		local execSuccess, execResult = pcall(function()
			return loadstring(content)()
		end)
		success, result = execSuccess, execResult
		requestCompleted = true
	end)

	local timeoutThread = task.delay(timeout, function()
		if not requestCompleted then
			warn(`Request for {url} timed out after {timeout} seconds`)
			task.cancel(requestThread)
			result = "Request timed out"
			requestCompleted = true
		end
	end)

	while not requestCompleted do
		task.wait()
	end

	if coroutine.status(timeoutThread) ~= "dead" then
		task.cancel(timeoutThread)
	end

	if not success then
		warn(`Failed to process {url}: {result}`)
	end

	return if success then result else nil
end

local requestsDisabled = true
local InterfaceBuild = '3K3W'
local Release = "Build 1.672"
local DavitrollzFolder = "DavitrollzMenu"
local ConfigurationFolder = DavitrollzFolder.."/Configurations"
local ConfigurationExtension = ".dtz"
local settingsTable = {
	General = {
		davitrollzMenuOpen = {Type = 'bind', Value = 'K', Name = 'DavitrollzMenu Keybind'},
	},
	System = {
		usageAnalytics = {Type = 'toggle', Value = true, Name = 'Anonymised Analytics'},
	}
}

local HttpService = getService('HttpService')
local RunService = getService('RunService')

local useStudio = RunService:IsStudio() or false
local settingsCreated = false
local cachedSettings
local request = (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request) or http_request or request

local function loadSettings()
	local file = nil
	local success, result = pcall(function()
		task.spawn(function()
			if isfolder and isfolder(DavitrollzFolder) then
				if isfile and isfile(DavitrollzFolder..'/settings'..ConfigurationExtension) then
					file = readfile(DavitrollzFolder..'/settings'..ConfigurationExtension)
				end
			end

			if useStudio then
				file = [[
{"General":{"davitrollzMenuOpen":{"Value":"K","Type":"bind","Name":"DavitrollzMenu Keybind","Element":{"HoldToInteract":false,"Ext":true,"Name":"DavitrollzMenu Keybind","Set":null,"CallOnChange":true,"Callback":null,"CurrentKeybind":"K"}}},"System":{"usageAnalytics":{"Value":false,"Type":"toggle","Name":"Anonymised Analytics","Element":{"Ext":true,"Name":"Anonymised Analytics","Set":null,"CurrentValue":false,"Callback":null}}}}
]]
			end

			if file then
				local success, decodedFile = pcall(function() return HttpService:JSONDecode(file) end)
				if success then
					file = decodedFile
				else
					file = {}
				end
			else
				file = {}
			end

			if not settingsCreated then 
				cachedSettings = file
				return
			end

			if file ~= {} then
				for categoryName, settingCategory in pairs(settingsTable) do
					if file[categoryName] then
						for settingName, setting in pairs(settingCategory) do
							if file[categoryName][settingName] then
								setting.Value = file[categoryName][settingName].Value
								setting.Element:Set(setting.Value)
							end
						end
					end
				end
			end
		end)
	end)

	if not success then 
		if writefile then
			warn('DavitrollzMenu had an issue accessing configuration saving capability.')
		end
	end
end

if debugX then
	warn('Now Loading Settings Configuration')
end

loadSettings()

if debugX then
	warn('Settings Loaded')
end

-- Continuação das alterações seria no restante do código, trocando Rayfield por DavitrollzMenu em nomes de variáveis, pastas, funções, comentários e mensagens.
